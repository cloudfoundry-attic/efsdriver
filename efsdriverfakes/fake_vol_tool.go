// This file was generated by counterfeiter
package efsdriverfakes

import (
	"sync"

	"code.cloudfoundry.org/efsdriver/efsvoltools"
	"code.cloudfoundry.org/voldriver"
)

type FakeVolTools struct {
	OpenPermsStub        func(env voldriver.Env, getRequest efsvoltools.OpenPermsRequest) efsvoltools.ErrorResponse
	openPermsMutex       sync.RWMutex
	openPermsArgsForCall []struct {
		env        voldriver.Env
		getRequest efsvoltools.OpenPermsRequest
	}
	openPermsReturns struct {
		result1 efsvoltools.ErrorResponse
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolTools) OpenPerms(env voldriver.Env, getRequest efsvoltools.OpenPermsRequest) efsvoltools.ErrorResponse {
	fake.openPermsMutex.Lock()
	fake.openPermsArgsForCall = append(fake.openPermsArgsForCall, struct {
		env        voldriver.Env
		getRequest efsvoltools.OpenPermsRequest
	}{env, getRequest})
	fake.recordInvocation("OpenPerms", []interface{}{env, getRequest})
	fake.openPermsMutex.Unlock()
	if fake.OpenPermsStub != nil {
		return fake.OpenPermsStub(env, getRequest)
	} else {
		return fake.openPermsReturns.result1
	}
}

func (fake *FakeVolTools) OpenPermsCallCount() int {
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	return len(fake.openPermsArgsForCall)
}

func (fake *FakeVolTools) OpenPermsArgsForCall(i int) (voldriver.Env, efsvoltools.OpenPermsRequest) {
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	return fake.openPermsArgsForCall[i].env, fake.openPermsArgsForCall[i].getRequest
}

func (fake *FakeVolTools) OpenPermsReturns(result1 efsvoltools.ErrorResponse) {
	fake.OpenPermsStub = nil
	fake.openPermsReturns = struct {
		result1 efsvoltools.ErrorResponse
	}{result1}
}

func (fake *FakeVolTools) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeVolTools) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ efsvoltools.VolTools = new(FakeVolTools)
