// Code generated by counterfeiter. DO NOT EDIT.
package efsdriverfakes

import (
	sync "sync"

	dockerdriver "code.cloudfoundry.org/dockerdriver"
	efsvoltools "code.cloudfoundry.org/efsdriver/efsvoltools"
)

type FakeVolTools struct {
	OpenPermsStub        func(dockerdriver.Env, efsvoltools.OpenPermsRequest) efsvoltools.ErrorResponse
	openPermsMutex       sync.RWMutex
	openPermsArgsForCall []struct {
		arg1 dockerdriver.Env
		arg2 efsvoltools.OpenPermsRequest
	}
	openPermsReturns struct {
		result1 efsvoltools.ErrorResponse
	}
	openPermsReturnsOnCall map[int]struct {
		result1 efsvoltools.ErrorResponse
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolTools) OpenPerms(arg1 dockerdriver.Env, arg2 efsvoltools.OpenPermsRequest) efsvoltools.ErrorResponse {
	fake.openPermsMutex.Lock()
	ret, specificReturn := fake.openPermsReturnsOnCall[len(fake.openPermsArgsForCall)]
	fake.openPermsArgsForCall = append(fake.openPermsArgsForCall, struct {
		arg1 dockerdriver.Env
		arg2 efsvoltools.OpenPermsRequest
	}{arg1, arg2})
	fake.recordInvocation("OpenPerms", []interface{}{arg1, arg2})
	fake.openPermsMutex.Unlock()
	if fake.OpenPermsStub != nil {
		return fake.OpenPermsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.openPermsReturns
	return fakeReturns.result1
}

func (fake *FakeVolTools) OpenPermsCallCount() int {
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	return len(fake.openPermsArgsForCall)
}

func (fake *FakeVolTools) OpenPermsCalls(stub func(dockerdriver.Env, efsvoltools.OpenPermsRequest) efsvoltools.ErrorResponse) {
	fake.openPermsMutex.Lock()
	defer fake.openPermsMutex.Unlock()
	fake.OpenPermsStub = stub
}

func (fake *FakeVolTools) OpenPermsArgsForCall(i int) (dockerdriver.Env, efsvoltools.OpenPermsRequest) {
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	argsForCall := fake.openPermsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolTools) OpenPermsReturns(result1 efsvoltools.ErrorResponse) {
	fake.openPermsMutex.Lock()
	defer fake.openPermsMutex.Unlock()
	fake.OpenPermsStub = nil
	fake.openPermsReturns = struct {
		result1 efsvoltools.ErrorResponse
	}{result1}
}

func (fake *FakeVolTools) OpenPermsReturnsOnCall(i int, result1 efsvoltools.ErrorResponse) {
	fake.openPermsMutex.Lock()
	defer fake.openPermsMutex.Unlock()
	fake.OpenPermsStub = nil
	if fake.openPermsReturnsOnCall == nil {
		fake.openPermsReturnsOnCall = make(map[int]struct {
			result1 efsvoltools.ErrorResponse
		})
	}
	fake.openPermsReturnsOnCall[i] = struct {
		result1 efsvoltools.ErrorResponse
	}{result1}
}

func (fake *FakeVolTools) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openPermsMutex.RLock()
	defer fake.openPermsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolTools) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ efsvoltools.VolTools = new(FakeVolTools)
